buildvariants:
- display_name: Ubuntu 16.04
  name: ubuntu1604
  run_on:
  - ubuntu1604-test
  tasks:
  - name: unit_tests
  - name: validate_requirements
  - name: yapf_src
  - name: deploy
  display_tasks:
  - name: yapf
    execution_tasks:
      - yapf_src


functions:
  create virtualenv:
  - command: shell.exec
    params:
      working_dir: src
      script: |
        set -o errexit
        virtualenv --python=/opt/mongodbtoolchain/v3/bin/python3 venv
        . venv/bin/activate
        pip install -r requirements.txt.freeze

  run yapf:
  - command: shell.exec
    params:
      working_dir: src
      script: |
        set -o errexit
        . venv/bin/activate

        export LC_ALL=C.UTF-8
        export LANG=C.UTF-8

        yapf-junit --target-dir ${target_directory} --out-file junit-yapf.xml --yapf-config .style.yapf

  validate requirements:
    - command: shell.exec
      params:
        working_dir: src
        script: |
          set -o errexit
          . venv/bin/activate

          pip freeze --local --requirement ${requirements_file} > pip.freeze
          diff ${requirements_file}.freeze pip.freeze

  upload code coverage:
    - command: shell.exec
      params:
        working_dir: src
        script: |
          set -o errexit
          . venv/bin/activate

          coverage combine
          COVERALLS_REPO_TOKEN=${coveralls_repo_token} coveralls

  deploy:
    - command: shell.exec
      params:
        working_dir: src
        script: |
          set -o errexit
          . venv/bin/activate


          if [ "${is_patch}" = "true" ]; then
            # Do not deploy on patches.
            exit 0
          fi

          scripts/deploy.sh ${pypi_user} ${pypi_password}

pre:
- command: git.get_project
  params:
    directory: src
- func: create virtualenv

post:
- command: attach.xunit_results
  params:
    file: src/junit-*.xml

tasks:
- name: unit_tests
  commands:
  - command: shell.exec
    params:
      working_dir: src
      script: |
        set -o errexit
        . venv/bin/activate

        tox
  - func: upload code coverage

- name: yapf_src
  commands:
  - func: run yapf
    vars:
      target_directory: src

- name: validate_requirements
  commands:
    - func: validate requirements
      vars:
        requirements_file: requirements.txt

- name: deploy
  patchable: false
  depends_on:
    - name: validate_requirements
    - name: yapf_src
    - name: unit_tests
  commands:
    - func: deploy